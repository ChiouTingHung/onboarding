/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.redhat.lab.interfaces.adapter.api;

import com.redhat.lab.interfaces.dto.BasicInfo;
import com.redhat.lab.interfaces.dto.CaseStatus;
import com.redhat.lab.interfaces.dto.Error;
import com.redhat.lab.interfaces.dto.Message;
import com.redhat.lab.interfaces.dto.ModelCase;
import com.redhat.lab.interfaces.dto.NewBasicInfo;
import com.redhat.lab.interfaces.dto.NewCase;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-14T11:54:45.004751+08:00[Asia/Taipei]")
@Validated
@Api(value = "cases", description = "the cases API")
public interface CasesApi {

    /**
     * GET /cases/{caseId}/basicInfo
     *
     * @param caseId  (required)
     * @return get the basic info by caseId (status code 200)
     */
    @ApiOperation(value = "", nickname = "casesCaseIdBasicInfoGet", notes = "", response = BasicInfo.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get the basic info by caseId", response = BasicInfo.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/{caseId}/basicInfo",
        produces = { "application/json" }
    )
    ResponseEntity<BasicInfo> casesCaseIdBasicInfoGet(@ApiParam(value = "", required = true) @PathVariable("caseId") String caseId);


    /**
     * POST /cases/{caseId}/basicInfo
     *
     * @param caseId  (required)
     * @param newBasicInfo  (required)
     * @return the status of creating basic info (status code 200)
     */
    @ApiOperation(value = "", nickname = "casesCaseIdBasicInfoPost", notes = "", response = BasicInfo.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the status of creating basic info", response = BasicInfo.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cases/{caseId}/basicInfo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<BasicInfo> casesCaseIdBasicInfoPost(@ApiParam(value = "", required = true) @PathVariable("caseId") String caseId,@ApiParam(value = "", required = true) @Valid @RequestBody NewBasicInfo newBasicInfo);


    /**
     * PUT /cases/{caseId}/basicInfo
     *
     * @param caseId  (required)
     * @param basicInfo  (required)
     * @return the status of updating basic info (status code 200)
     */
    @ApiOperation(value = "", nickname = "casesCaseIdBasicInfoPut", notes = "", response = Message.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the status of updating basic info", response = Message.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cases/{caseId}/basicInfo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Message> casesCaseIdBasicInfoPut(@ApiParam(value = "", required = true) @PathVariable("caseId") String caseId,@ApiParam(value = "", required = true) @Valid @RequestBody BasicInfo basicInfo);


    /**
     * GET /cases/{caseId}/status
     *
     * @param caseId  (required)
     * @return get case review status (status code 200)
     */
    @ApiOperation(value = "", nickname = "casesCaseIdStatusGet", notes = "", response = CaseStatus.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get case review status", response = CaseStatus.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/{caseId}/status",
        produces = { "application/json" }
    )
    ResponseEntity<CaseStatus> casesCaseIdStatusGet(@ApiParam(value = "", required = true) @PathVariable("caseId") String caseId);


    /**
     * PUT /cases/{caseId}/status : update case status
     *
     * @param caseId  (required)
     * @param caseStatus  (required)
     * @return update case status (status code 200)
     */
    @ApiOperation(value = "update case status", nickname = "casesCaseIdStatusPut", notes = "", response = Message.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "update case status", response = Message.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cases/{caseId}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Message> casesCaseIdStatusPut(@ApiParam(value = "", required = true) @PathVariable("caseId") String caseId,@ApiParam(value = "", required = true) @Valid @RequestBody CaseStatus caseStatus);


    /**
     * GET /cases : Retrieve all cases
     * Returns all cases from the system that the user has access to 
     *
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Retrieve all cases", nickname = "casesGet", notes = "Returns all cases from the system that the user has access to ", response = ModelCase.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet response", response = ModelCase.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases",
        produces = { "application/json" }
    )
    ResponseEntity<List<ModelCase>> casesGet();


    /**
     * POST /cases : Create an application
     * 建立申請
     *
     * @param newCase Pet to add to the store (required)
     * @return pet response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Create an application", nickname = "casesPost", notes = "建立申請", response = ModelCase.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet response", response = ModelCase.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ModelCase> casesPost(@ApiParam(value = "Pet to add to the store", required = true) @Valid @RequestBody NewCase newCase);


    /**
     * GET /cases/{caseId}
     * Returns a user based on a single ID, if the user does not have access to the pet
     *
     * @param caseId case id (required)
     * @return case response (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "", nickname = "findPetById", notes = "Returns a user based on a single ID, if the user does not have access to the pet", response = ModelCase.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "case response", response = ModelCase.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cases/{caseId}",
        produces = { "application/json" }
    )
    ResponseEntity<ModelCase> findPetById(@ApiParam(value = "case id", required = true) @PathVariable("caseId") String caseId);

}
